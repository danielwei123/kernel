/******************************************************************************/
/* Important Spring 2016 CSCI 402 usage information:                          */
/*                                                                            */
/* This fils is part of CSCI 402 kernel programming assignments at USC.       */
/*         53616c7465645f5f2e8d450c0c5851acd538befe33744efca0f1c4f9fb5f       */
/*         3c8feabc561a99e53d4d21951738da923cd1c7bbd11b30a1afb11172f80b       */
/*         984b1acfbbf8fae6ea57e0583d2610a618379293cb1de8e1e9d07e6287e8       */
/*         de7e82f3d48866aa2009b599e92c852f7dbf7a6e573f1c7228ca34b9f368       */
/*         faaef0c0fcf294cb                                                   */
/* Please understand that you are NOT permitted to distribute or publically   */
/*         display a copy of this file (or ANY PART of it) for any reason.    */
/* If anyone (including your prospective employer) asks you to post the code, */
/*         you must inform them that you do NOT have permissions to do so.    */
/* You are also NOT permitted to remove or alter this comment block.          */
/* If this comment block is removed or altered in a submitted file, 20 points */
/*         will be deducted.                                                  */
/******************************************************************************/

#include "kernel.h"
#include "config.h"
#include "globals.h"
#include "errno.h"

#include "util/debug.h"
#include "util/list.h"
#include "util/string.h"
#include "util/printf.h"

#include "proc/kthread.h"
#include "proc/proc.h"
#include "proc/sched.h"
#include "proc/proc.h"

#include "mm/slab.h"
#include "mm/page.h"
#include "mm/mmobj.h"
#include "mm/mm.h"
#include "mm/mman.h"

#include "vm/vmmap.h"

#include "fs/vfs.h"
#include "fs/vfs_syscall.h"
#include "fs/vnode.h"
#include "fs/file.h"

proc_t *curproc = NULL; /* global */
static slab_allocator_t *proc_allocator = NULL;

static list_t _proc_list;
static proc_t *proc_initproc = NULL; /* Pointer to the init process (PID 1) */

void
proc_init()
{
        list_init(&_proc_list);
        proc_allocator = slab_allocator_create("proc", sizeof(proc_t));
        KASSERT(proc_allocator != NULL);
}

proc_t *
proc_lookup(int pid)
{
        proc_t *p;
        list_iterate_begin(&_proc_list, p, proc_t, p_list_link) {
                if (p->p_pid == pid) {
                        return p;
                }
        } list_iterate_end();
        return NULL;
}

list_t *
proc_list()
{
        return &_proc_list;
}

static pid_t next_pid = 0;

/**
 * Returns the next available PID.
 *
 * Note: Where n is the number of running processes, this algorithm is
 * worst case O(n^2). As long as PIDs never wrap around it is O(n).
 *
 * @return the next available PID
 */
static int
_proc_getid()
{
        proc_t *p;
        pid_t pid = next_pid;
        while (1) {
failed:
                list_iterate_begin(&_proc_list, p, proc_t, p_list_link) {
                        if (p->p_pid == pid) {
                                if ((pid = (pid + 1) % PROC_MAX_COUNT) == next_pid) {
                                        return -1;
                                } else {
                                        goto failed;
                                }
                        }
                } list_iterate_end();
                next_pid = (pid + 1) % PROC_MAX_COUNT;
                return pid;
        }
}

/*
 * The new process, although it isn't really running since it has no
 * threads, should be in the PROC_RUNNING state.
 *
 * Don't forget to set proc_initproc when you create the init
 * process. You will need to be able to reference the init process
 * when reparenting processes to the init process.
 */
proc_t *
proc_create(char *name)
{
        /*NOT_YET_IMPLEMENTED("PROCS: proc_create");*/
        
        proc_t *pt = (proc_t *)slab_obj_alloc(proc_allocator);
        KASSERT(pt && "Unable to allocate memory to process.\n");

        pt->p_pid = _proc_getid();

        KASSERT(PID_IDLE != pt->p_pid || list_empty(&_proc_list));
        dbg(DBG_PRINT, "GRADING1MW 2.a\n");
        KASSERT(PID_INIT != pt->p_pid || PID_IDLE == curproc->p_pid);
        dbg(DBG_PRINT, "GRADING1MW 2.a\n");

        strcpy(pt->p_comm, name);
        list_init(&(pt->p_threads));
        list_init(&(pt->p_children));
        pt->p_state = PROC_RUNNING;

        pt->p_pagedir = pt_create_pagedir();

        list_link_init(&(pt->p_list_link));
        list_link_init(&(pt->p_child_link));

		/* we have to initialize status
		pt->p_status
		*/
		
		/*insert this proc into proc queue*/
		list_insert_tail(&_proc_list, &(pt->p_list_link));
		
		if(pt->p_pid == PID_INIT){
			proc_initproc = pt;
		}
		
        return pt;
}

/**
 * Cleans up as much as the process as can be done from within the
 * process. This involves:
 *    - Closing all open files (VFS)
 *    - Cleaning up VM mappings (VM)
 *    - Waking up its parent if it is waiting
 *    - Reparenting any children to the init process
 *    - Setting its status and state appropriately
 *
 * The parent will finish destroying the process within do_waitpid (make
 * sure you understand why it cannot be done here). Until the parent
 * finishes destroying it, the process is informally called a 'zombie'
 * process.
 *
 * This is also where any children of the current process should be
 * reparented to the init process (unless, of course, the current
 * process is the init process. However, the init process should not
 * have any children at the time it exits).
 *
 * Note: You do _NOT_ have to special case the idle process. It should
 * never exit this way.
 *
 * @param status the status to exit the process with
 */
void
proc_cleanup(int status)
{
        NOT_YET_IMPLEMENTED("PROCS: proc_cleanup");
}

/*
 * This has nothing to do with signals and kill(1).
 *
 * Calling this on the current process is equivalent to calling
 * do_exit().
 *
 * In Weenix, this is only called from proc_kill_all.
 */
void
proc_kill(proc_t *p, int status)
{
        NOT_YET_IMPLEMENTED("PROCS: proc_kill");
}

/*
 * Remember, proc_kill on the current process will _NOT_ return.
 * Don't kill direct children of the idle process.
 *
 * In Weenix, this is only called by sys_halt.
 */
void
proc_kill_all()
{
        NOT_YET_IMPLEMENTED("PROCS: proc_kill_all");
}

/*
 * This function is only called from kthread_exit.
 *
 * Unless you are implementing MTP, this just means that the process
 * needs to be cleaned up and a new thread needs to be scheduled to
 * run. If you are implementing MTP, a single thread exiting does not
 * necessarily mean that the process should be exited.
 */
void
proc_thread_exited(void *retval)
{
        NOT_YET_IMPLEMENTED("PROCS: proc_thread_exited");
}

/* If pid is -1 dispose of one of the exited children of the current
 * process and return its exit status in the status argument, or if
 * all children of this process are still running, then this function
 * blocks on its own p_wait queue until one exits.
 *
 * If pid is greater than 0 and the given pid is a child of the
 * current process then wait for the given pid to exit and dispose
 * of it.
 *
 * If the current process has no children, or the given pid is not
 * a child of the current process return -ECHILD.
 *
 * Pids other than -1 and positive numbers are not supported.
 * Options other than 0 are not supported.
 */
pid_t
do_waitpid(pid_t pid, int options, int *status)
{
        NOT_YET_IMPLEMENTED("PROCS: do_waitpid");
	
	
		list_link_t	*link;
		proc_t		*pt = NULL;
		thread_t	*thr = NULL;
		
		int			child_of_cur = 0;
		int			dead_child = 0;
		int			return_value = 0;
	
		if(pid == -1)
		{
		
			/*remove this loop afterwards*/
			do
			{
				for (link = curproc->p_children->l_next; link != curproc->p_children; link = link->l_next)
        		{	

					pt = list_item(link, proc_t, p_child_link);
			
        			if(pt->state == PROC_DEAD)
        			{
        				dead_child = 1;
        				break;
        			}
        
        		}	
        		
        		if(dead_child == 0)
        		{
        			sched_sleep_on(&(curproc->p_wait));
        		
        		}
			
			}while(dead_child == 0);
		
			*status = pt->p_status;
			/* if the proc has children assign them to init proc*/
			
			link = pt->p_thread->l_next;
			
			while( link != pt->p_threads)
			{
				
				thr = list_item(link, thread_t, kt_plink);
				
				link = link->l_next;
				
				kthread_destroy(thr);
			}
			
			
			list_remove(pt->p_child_link);
			list_remove(pt->p_list_link);
			
			pt_destroy_pagedir(pt->p_pagedir);
			
			return_value = pt->p_pid;
			
			slab_obj_free(proc_allocator, pt);
			
			return return_value;
		}
	
		if(pid < -1 || pid == 0){
			return	-ECHILD;
		}
		
		if(options != 0){
			return	-ECHILD;
		}
		
		if(list_empty(&(curproc->p_children))){
			return	-ECHILD;
		}

		
	    for (link = curproc->p_children->l_next; link != curproc->p_children; link = link->l_next)
        {
			pt = list_item(link, proc_t, p_child_link);
			
        	if(pt->p_pid == pid)
        	{
        		child_of_cur = 1;
        		break;
        	}
        
        }
        
        if(child_of_cur == 0)
        {
        	return	-ECHILD;
        }
        

		for(link = curproc->p_children->l_next; link != curproc->p_children; link = link->l_next)
		{
				pt = list_item(link, proc_t, p_child_link);
				
				if(pt->p_pid == pid)
				{
					break;
				}
			

		}
        
        while(pt->p_state != PROC_DEAD)
        {
        	sched_sleep_on(&(curproc->p_wait));
        }
        
        
        list_remove(pt->p_child_link);
		list_remove(pt->p_list_link);
			
		pt_destroy_pagedir(pt->p_pagedir);
			
		return_value = pt->p_pid;
			
		slab_obj_free(proc_allocator, pt);
			
		return return_value;


}

/*
 * Cancel all threads, join with them, and exit from the current
 * thread.
 *
 * @param status the exit status of the process
 */
void
do_exit(int status)
{
        NOT_YET_IMPLEMENTED("PROCS: do_exit");
}

size_t
proc_info(const void *arg, char *buf, size_t osize)
{
        const proc_t *p = (proc_t *) arg;
        size_t size = osize;
        proc_t *child;

        KASSERT(NULL != p);
        KASSERT(NULL != buf);

        iprintf(&buf, &size, "pid:          %i\n", p->p_pid);
        iprintf(&buf, &size, "name:         %s\n", p->p_comm);
        if (NULL != p->p_pproc) {
                iprintf(&buf, &size, "parent:       %i (%s)\n",
                        p->p_pproc->p_pid, p->p_pproc->p_comm);
        } else {
                iprintf(&buf, &size, "parent:       -\n");
        }

#ifdef __MTP__
        int count = 0;
        kthread_t *kthr;
        list_iterate_begin(&p->p_threads, kthr, kthread_t, kt_plink) {
                ++count;
        } list_iterate_end();
        iprintf(&buf, &size, "thread count: %i\n", count);
#endif

        if (list_empty(&p->p_children)) {
                iprintf(&buf, &size, "children:     -\n");
        } else {
                iprintf(&buf, &size, "children:\n");
        }
        list_iterate_begin(&p->p_children, child, proc_t, p_child_link) {
                iprintf(&buf, &size, "     %i (%s)\n", child->p_pid, child->p_comm);
        } list_iterate_end();

        iprintf(&buf, &size, "status:       %i\n", p->p_status);
        iprintf(&buf, &size, "state:        %i\n", p->p_state);

#ifdef __VFS__
#ifdef __GETCWD__
        if (NULL != p->p_cwd) {
                char cwd[256];
                lookup_dirpath(p->p_cwd, cwd, sizeof(cwd));
                iprintf(&buf, &size, "cwd:          %-s\n", cwd);
        } else {
                iprintf(&buf, &size, "cwd:          -\n");
        }
#endif /* __GETCWD__ */
#endif

#ifdef __VM__
        iprintf(&buf, &size, "start brk:    0x%p\n", p->p_start_brk);
        iprintf(&buf, &size, "brk:          0x%p\n", p->p_brk);
#endif

        return size;
}

size_t
proc_list_info(const void *arg, char *buf, size_t osize)
{
        size_t size = osize;
        proc_t *p;

        KASSERT(NULL == arg);
        KASSERT(NULL != buf);

#if defined(__VFS__) && defined(__GETCWD__)
        iprintf(&buf, &size, "%5s %-13s %-18s %-s\n", "PID", "NAME", "PARENT", "CWD");
#else
        iprintf(&buf, &size, "%5s %-13s %-s\n", "PID", "NAME", "PARENT");
#endif

        list_iterate_begin(&_proc_list, p, proc_t, p_list_link) {
                char parent[64];
                if (NULL != p->p_pproc) {
                        snprintf(parent, sizeof(parent),
                                 "%3i (%s)", p->p_pproc->p_pid, p->p_pproc->p_comm);
                } else {
                        snprintf(parent, sizeof(parent), "  -");
                }

#if defined(__VFS__) && defined(__GETCWD__)
                if (NULL != p->p_cwd) {
                        char cwd[256];
                        lookup_dirpath(p->p_cwd, cwd, sizeof(cwd));
                        iprintf(&buf, &size, " %3i  %-13s %-18s %-s\n",
                                p->p_pid, p->p_comm, parent, cwd);
                } else {
                        iprintf(&buf, &size, " %3i  %-13s %-18s -\n",
                                p->p_pid, p->p_comm, parent);
                }
#else
                iprintf(&buf, &size, " %3i  %-13s %-s\n",
                        p->p_pid, p->p_comm, parent);
#endif
        } list_iterate_end();
        return size;
}/******************************************************************************/
/* Important Spring 2016 CSCI 402 usage information:                          */
/*                                                                            */
/* This fils is part of CSCI 402 kernel programming assignments at USC.       */
/*         53616c7465645f5f2e8d450c0c5851acd538befe33744efca0f1c4f9fb5f       */
/*         3c8feabc561a99e53d4d21951738da923cd1c7bbd11b30a1afb11172f80b       */
/*         984b1acfbbf8fae6ea57e0583d2610a618379293cb1de8e1e9d07e6287e8       */
/*         de7e82f3d48866aa2009b599e92c852f7dbf7a6e573f1c7228ca34b9f368       */
/*         faaef0c0fcf294cb                                                   */
/* Please understand that you are NOT permitted to distribute or publically   */
/*         display a copy of this file (or ANY PART of it) for any reason.    */
/* If anyone (including your prospective employer) asks you to post the code, */
/*         you must inform them that you do NOT have permissions to do so.    */
/* You are also NOT permitted to remove or alter this comment block.          */
/* If this comment block is removed or altered in a submitted file, 20 points */
/*         will be deducted.                                                  */
/******************************************************************************/

#include "types.h"
#include "kernel.h"
#include "config.h"
#include "errno.h"
#include "limits.h"
#include "globals.h"

#include "main/interrupt.h"

#include "mm/mm.h"
#include "mm/page.h"
#include "mm/pagetable.h"
#include "mm/phys.h"
#include "mm/tlb.h"
#include "mm/pframe.h"

#include "util/debug.h"
#include "util/string.h"
#include "util/printf.h"

#include "vm/pagefault.h"

#include "boot/config.h"

#define PT_ENTRY_COUNT    (PAGE_SIZE / sizeof (uint32_t))
#define PT_VADDR_SIZE     (PAGE_SIZE * PT_ENTRY_COUNT)

struct pagedir {
        pde_t      pd_physical[PT_ENTRY_COUNT];
        uintptr_t *pd_virtual[PT_ENTRY_COUNT];
};

/* for a given virtual memory address these macros will
 * calculate the index into the page directory and page
 * tables for that memory location as well as the offset
 * into the page of physical memory */
#define vaddr_to_pdindex(vaddr) \
        ((((uint32_t)(vaddr)) >> PAGE_SHIFT) / PT_ENTRY_COUNT)
#define vaddr_to_ptindex(vaddr) \
        ((((uint32_t)(vaddr)) >> PAGE_SHIFT) % PT_ENTRY_COUNT)
#define vaddr_to_offset(vaddr) \
        (((uint32_t)(vaddr)) & (~PAGE_MASK))

/* the virtual address of the page directory in cr3 */
static pagedir_t *current_pagedir = NULL;
static pagedir_t *template_pagedir = NULL;

static uint32_t phys_map_count = 1;
static pte_t *final_page;

uintptr_t
pt_phys_tmp_map(uintptr_t paddr)
{
        KASSERT(PAGE_ALIGNED(paddr));
        final_page[PT_ENTRY_COUNT - 1] = paddr | PT_PRESENT | PT_WRITE;

        uintptr_t vaddr = UPTR_MAX - PAGE_SIZE + 1;
        tlb_flush(vaddr);
        return vaddr;
}

uintptr_t
pt_phys_perm_map(uintptr_t paddr, uint32_t count)
{
        KASSERT(PAGE_ALIGNED(paddr));

        phys_map_count += count;
        KASSERT(phys_map_count < PT_ENTRY_COUNT);

        uint32_t i;
        for (i = 0; i < count; ++i) {
                final_page[PT_ENTRY_COUNT - phys_map_count + i] =
                        (paddr + PAGE_SIZE * i) | PT_PRESENT | PT_WRITE;
        }

        uintptr_t vaddr = UPTR_MAX - (PAGE_SIZE * phys_map_count) + 1;
        tlb_flush(vaddr);
        return vaddr;
}

uintptr_t
pt_virt_to_phys(uintptr_t vaddr)
{
        uint32_t table = vaddr_to_pdindex(vaddr);
        uint32_t entry = vaddr_to_ptindex(vaddr);
        uint32_t offset = vaddr_to_offset(vaddr);

        pte_t *pagetable = (pte_t *)pt_phys_tmp_map(current_pagedir->pd_physical[table] & PAGE_MASK);
        uintptr_t page = pagetable[entry] & PAGE_MASK;
        return page + offset;
}

void
pt_set(pagedir_t *pd)
{
        uintptr_t pdir = pt_virt_to_phys((uintptr_t)pd->pd_physical);
        current_pagedir = pd;
        __asm__ volatile("movl %0, %%cr3" :: "r"(pdir) : "memory");
}

pagedir_t *
pt_get(void)
{
        return current_pagedir;
}

int
pt_map(pagedir_t *pd, uintptr_t vaddr, uintptr_t paddr, uint32_t pdflags, uint32_t ptflags)
{
        KASSERT(PAGE_ALIGNED(vaddr) && PAGE_ALIGNED(paddr));
        KASSERT(USER_MEM_LOW <= vaddr && USER_MEM_HIGH > vaddr);

        int index = vaddr_to_pdindex(vaddr);

        pte_t *pt;
        if (!(PT_PRESENT & pd->pd_physical[index])) {
                if (NULL == (pt = page_alloc())) {
                        return -ENOMEM;
                } else {
                        KASSERT((pdflags & ~PAGE_MASK) == pdflags);
                        memset(pt, 0, PAGE_SIZE);
                        pd->pd_physical[index] = pt_virt_to_phys((uintptr_t)pt) | pdflags;
                        pd->pd_virtual[index] = pt;
                }
        } else {
                /* Be sure to add additional pagedir flags if necessary */
                pd->pd_physical[index] = pd->pd_physical[index] | pdflags;
                pt = (pte_t *)pd->pd_virtual[index];
        }

        index = vaddr_to_ptindex(vaddr);

        KASSERT((ptflags & ~PAGE_MASK) == ptflags);
        pt[index] = paddr | ptflags;

        return 0;
}

void
pt_unmap(pagedir_t *pd, uintptr_t vaddr)
{
        KASSERT(PAGE_ALIGNED(vaddr));
        KASSERT(USER_MEM_LOW <= vaddr && USER_MEM_HIGH > vaddr);

        int index = vaddr_to_pdindex(vaddr);

        if (PT_PRESENT & pd->pd_physical[index]) {
                pte_t *pt = (pte_t *)pd->pd_virtual[index];

                index = vaddr_to_ptindex(vaddr);
                pt[index] = 0;
        }
}

void
pt_unmap_range(pagedir_t *pd, uintptr_t vlow, uintptr_t vhigh)
{
        uint32_t index;

        KASSERT(vlow < vhigh);
        KASSERT(PAGE_ALIGNED(vlow) && PAGE_ALIGNED(vhigh));
        KASSERT(USER_MEM_LOW <= vlow && USER_MEM_HIGH >= vhigh);

        index = vaddr_to_ptindex(vlow);
        if (PT_PRESENT & pd->pd_physical[vaddr_to_pdindex(vlow)] && index != 0) {
                pte_t *pt = (pte_t *)pd->pd_virtual[vaddr_to_pdindex(vlow)];
                size_t size = (PT_ENTRY_COUNT - index) * sizeof(*pt);
                memset(&pt[index], 0, size);
        }
        vlow += PAGE_SIZE * ((PT_ENTRY_COUNT - index) % PT_ENTRY_COUNT);

        index = vaddr_to_ptindex(vhigh);
        if (PT_PRESENT & pd->pd_physical[vaddr_to_pdindex(vhigh)] && index != 0) {
                pte_t *pt = (pte_t *)pd->pd_virtual[vaddr_to_pdindex(vhigh)];
                size_t size = index * sizeof(*pt);
                memset(&pt[0], 0, size);
        }
        vhigh -= PAGE_SIZE * index;

        uint32_t i;
        for (i = vaddr_to_pdindex(vlow); i < vaddr_to_pdindex(vhigh); ++i) {
                if (PT_PRESENT & pd->pd_physical[i]) {
                        page_free(pd->pd_virtual[i]);
                        pd->pd_virtual[i] = NULL;
                        pd->pd_physical[i] = 0;
                }
        }
}


pagedir_t *
pt_create_pagedir()
{
        KASSERT(sizeof(pagedir_t) == PAGE_SIZE * 2);

        pagedir_t *pdir;
        if (NULL == (pdir = page_alloc_n(2))) {
                return NULL;
        }

        memcpy(pdir, template_pagedir, sizeof(*pdir));
        return pdir;
}

void
pt_destroy_pagedir(pagedir_t *pdir)
{
        KASSERT(PAGE_ALIGNED(pdir));

        uint32_t begin = USER_MEM_LOW / PT_VADDR_SIZE;
        uint32_t end = (USER_MEM_HIGH - 1) / PT_VADDR_SIZE;
        KASSERT(begin < end && begin > 0);

        uint32_t i;
        for (i = begin; i <= end; ++i) {
                if (PT_PRESENT & pdir->pd_physical[i]) {
                        page_free(pdir->pd_virtual[i]);
                }
        }
        page_free_n(pdir, 2);
}

static void
_pt_fault_handler(regs_t *regs)
{
        uintptr_t vaddr;
        /* Get the address where the fault occurred */
        __asm__ volatile("movl %%cr2, %0" : "=r"(vaddr));
        uint32_t cause = regs->r_err;

        /* Check if pagefault was in user space (otherwise, BAD!) */
        if (cause & FAULT_USER) {
                handle_pagefault(vaddr, cause);
        } else {
                panic("\nPage faulted while accessing 0x%08x\n", vaddr);
        }
}

static void
_pt_fill_page(pagedir_t *pd, pte_t *pt, pde_t pdflags, pte_t ptflags,
              uintptr_t vstart, uintptr_t pstart)
{
        KASSERT(NULL != pd && NULL != pt);
        KASSERT(0 == vstart % PT_VADDR_SIZE);

        uint32_t i;
        memset(pt, 0, PAGE_SIZE);
        for (i = 0; i < PT_ENTRY_COUNT; ++i) {
                pt[i] = (i * PAGE_SIZE + pstart) & PAGE_MASK;
                pt[i] = pt[i] | (ptflags & ~(PAGE_MASK));
        }
        uint32_t base = vaddr_to_pdindex(vstart);

        uint32_t table = vaddr_to_pdindex((uintptr_t)pt);
        uint32_t entry = vaddr_to_ptindex((uintptr_t)pt);

        pde_t *temppdir;
        __asm__ volatile("movl %%cr3, %0" : "=r"(temppdir));
        pte_t *pagetable = (pte_t *)pt_phys_tmp_map(temppdir[table] & PAGE_MASK);
        uintptr_t page = pagetable[entry] & PAGE_MASK;

        pd->pd_physical[base] = page | (pdflags & ~(PAGE_MASK));
        pd->pd_virtual[base] = pt;
}

void
pt_init(void)
{
        /* save the "current" page table (the temporary page
         * table created by the boot loader), note, the value is
         * only valid because the bootloader placed the page table
         * in the first 1mb of memory which is identity mapped,
         * normally current_pagedir holds a virtual address while
         * cr3 holds a physical address */
        pde_t *temppdir;
        __asm__ volatile("movl %%cr3, %0" : "=r"(temppdir));

        pagedir_t *pagedir = (pagedir_t *)&kernel_end;
        /* The kernel ending address should be page aligned by the linker script */
        KASSERT(PAGE_ALIGNED(pagedir));
        memset(pagedir, 0, sizeof(*pagedir));

        /* set up the necessary stuff for temporary mappings */
        final_page = (pde_t *)((char *)pagedir + sizeof(*pagedir));
        KASSERT(PAGE_ALIGNED(final_page));
        memset(final_page, 0, PAGE_SIZE);
        temppdir[PT_ENTRY_COUNT - 1] = ((uintptr_t)final_page
                                        - (uintptr_t)&kernel_start + KERNEL_PHYS_BASE) | PT_PRESENT | PT_WRITE;
        pagedir->pd_physical[PT_ENTRY_COUNT - 1] = temppdir[PT_ENTRY_COUNT - 1];
        pagedir->pd_virtual[PT_ENTRY_COUNT - 1] = final_page;

        /* identity map the first 4mb (one page table) of physical memory */
        pte_t *pagetable = final_page + PT_ENTRY_COUNT;
        _pt_fill_page(pagedir, pagetable, PD_PRESENT | PD_WRITE, PT_PRESENT | PT_WRITE, 0, 0);

        /* map in 4mb (one page table) where the kernel is
         * this will make our new page table identical to the temporary
         * page table the boot loader created. */
        pagetable += PT_ENTRY_COUNT;
        _pt_fill_page(pagedir, pagetable, PD_PRESENT | PD_WRITE, PT_PRESENT | PT_WRITE,
                      (uintptr_t)&kernel_start, KERNEL_PHYS_BASE);

        current_pagedir = pagedir;
        /* swap the temporary page table with our identical, but more
         * permanant page table */
        pt_set(pagedir);

        uintptr_t physmax = phys_detect_highmem();
        dbgq(DBG_MM, "Highest usable physical memory: 0x%08x\n", physmax);
        dbgq(DBG_MM, "Available memory: 0x%08x\n", physmax - KERNEL_PHYS_BASE);

        uintptr_t vaddr = ((uintptr_t)&kernel_start);
        uintptr_t paddr = KERNEL_PHYS_BASE;
        do {
                pagetable += PT_ENTRY_COUNT;
                vaddr += PT_VADDR_SIZE;
                paddr += PT_VADDR_SIZE;
                _pt_fill_page(pagedir, pagetable, PD_PRESENT | PD_WRITE, PT_PRESENT | PT_WRITE, vaddr, paddr);
        } while (paddr < physmax);

        page_add_range((uintptr_t) pagetable + PT_ENTRY_COUNT, physmax + ((uintptr_t)&kernel_start) - KERNEL_PHYS_BASE);
}

void
pt_template_init()
{
        /* the current page directory should be the same one set up by
         * the pt_init function above, it needs to be slighly modified
         * to remove the mapping of the first 4mb and then saved in a
         * seperate page as the template */
        memset(current_pagedir->pd_virtual[0], 0, PAGE_SIZE);
        tlb_flush_all();

        template_pagedir = page_alloc_n(2);
        KASSERT(NULL != template_pagedir);
        memcpy(template_pagedir, current_pagedir, sizeof(*template_pagedir));

        intr_register(INTR_PAGE_FAULT, _pt_fault_handler);
}

/* Debugging information to print human-readable information about
 * a struct pagedir. */
size_t
pt_mapping_info(const void *pt, char *buf, size_t osize)
{
        size_t size = osize;

        KASSERT(NULL != pt);
        KASSERT(NULL != buf);

        const struct pagedir *pagedir = pt;
        uintptr_t vstart, pstart;
        uintptr_t pexpect;
        uint32_t pdi = 0;
        uint32_t pti = 0;
        int started = 0;

        while (PT_ENTRY_COUNT > pdi) {
                pte_t *entry = NULL;
                if (PD_PRESENT & pagedir->pd_physical[pdi]) {
                        if (PT_PRESENT & pagedir->pd_virtual[pdi][pti]) {
                                entry = &pagedir->pd_virtual[pdi][pti];
                        }
                } else {
                        ++pdi;
                        pti = 0;
                }

                int present = (NULL != entry);
                pexpect += PAGE_SIZE;
                if (present && !started) {
                        started = 1;
                        vstart = (pdi * PT_ENTRY_COUNT + pti) * PAGE_SIZE;
                        pstart = *entry & PAGE_MASK;
                        pexpect = pstart;
                } else if ((started && !present)
                           || (started && present && ((*entry & PAGE_MASK) != pexpect))) {
                        uintptr_t vend = (pdi * PT_ENTRY_COUNT + pti) * PAGE_SIZE;
                        uintptr_t pend = pstart + (vend - vstart);

                        started = 0;
                        iprintf(&buf, &size, "%#.8x-%#.8x => %#.8x-%#.8x\n",
                                vstart, vend, pstart, pend);
                }

                if (++pti == PT_ENTRY_COUNT) {
                        ++pdi;
                        pti = 0;
                }
        }

        return osize - size;
}
